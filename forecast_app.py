import streamlit as st
from country_mappings import country_codes
from entsoe_client import get_energy_data
from forecast import generate_forecast, calculate_smape

st.title("Forecasting Renewable Energy Generation in the UK")
st.markdown("Chart One displays the total energy generation composition within the UK,\
             the other charts can be used as forecasts for solar and wind energy.")

country = st.sidebar.selectbox(label = "Select a Country", index = 9,
                               options = list(COUNTRY_MAPPINGS.keys()))

regressor = st.sidebar.selectbox("Select a Regression Algorithm",
                                 ['Linear Regression', 'K-Nearest Neighbors',
                                  'Random Forest', 'Gradient Boosting', 'XGBoost',
                                  'Support Vector Machines', 'Extra Trees'])

st.subheader('Total Energy Generation in the ' + country + ' (MW)')

forecast_horizon = st.sidebar.slider(label='Forecast Horizon (hours)',
                                     min_value=12, max_value=168, value=48)

window_length = st.sidebar.slider(label='Window Length',
                                  min_value=1, value=30)

country_code = country_codes[country]
df = get_energy_data(country_code)

# Plotting an area chart for the total energy generation for the UK
st.area_chart(df, use_container_width=False, width=900)

st.markdown("You can also select the regression algorithm, \
        the forecast horizon, and the window length (click/tap the arrow if you can't see the settings).\
        The SMAPE metric helps estimate the accuracy of the forecast (lower is better). \
        By adjusting the settings and lowering the SMAPE (Symmetric Mean Absolute Percentage Error) value, better results can be achieved.\
        ")

cols_renewable = ['Wind Onshore', 'Wind Offshore', 'Solar']

df = df[df.columns & cols_renewable]

for item in df.columns:
    smape = calculate_smape(df[[item]], regressor, forecast_horizon, window_length)
    st.subheader(item + ' Energy Generation Forecast in the ' + country + ' (MW)')
    # Generating and plotting a forecast for each renewable energy type
    df_forecast = generate_forecast(df[[item]], regressor, forecast_horizon, window_length)
    st.line_chart(df_forecast, use_container_width=False, width=800)
    st.text("SMAPE: %.2f" % smape)

# Table containing the power generated by solar and wind 
st.subheader("Source Data")
if st.checkbox("Show Source Data"):
    st.markdown("The maximum power generated by each source is **highlighted**.")
    table = st.write(df.style.highlight_max(axis=0).format("{:.0f}"))

st.sidebar.title("About")
st.sidebar.info(
        "This page \n"
        "uses Streamlit to create a renewable forecasting data app.\n\n"
        "Check the code at https://github.com/obedsims/forecast_app"
)
